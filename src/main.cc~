#include "lcsgd.h"

using namespace std;
using namespace lcsgd;

namespace {
bool ParseFile(const char* file_path,
               std::vector<classifier::datum>* data) {
  std::vector<classifier::datum>(0).swap(*data);
  
  std::ifstream ifs(file_path);
  if (!ifs) {
    std::cerr << "cannot open " << file_path << std::endl;
    return false;
  }

  size_t lineN = 0;
  for (std::string line; getline(ifs, line); ++lineN) {
    classifier::datum datum;
    datum.category = line;
    
    getline(ifs, line);
    std::istringstream iss(line);

    std::vector<std::string> words(0);
    std::string word;
    while (iss >> word) {
      words.push_back(word);
    }
    
    datum.words = words;
    data->push_back(datum);
  }

  return true;
}

data_t GenerateData() {
  data_t data;
  for (int i = 0; i < 10; ++i) {
    datum_t datum;
    int label = (i % 2) * 2 - 1;
    datum.label = label;
    for (int j = 0; j < 10; ++j) {
      int feature_id = j * 10 + i;
      datum.features.emplace_back(feature_id, label);
      if (feature_id > data.max_feature_id)
        data.max_feature_id = feature_id;
    }
    data.examples.emplace_back(datum);
    ++data.data_size;
  }

  return data;
}
} //namespace {anonymous}

int main() {
  LCSGD lcsgd;
  data_t data = GenerateData();
  lcsgd.LoadData(data);

  lcsgd.Update(1000);
  return 0;
}
